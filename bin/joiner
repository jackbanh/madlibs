#!/usr/bin/ruby
require 'optparse'
require_relative '../lib/noun.rb'

def doSub!(phrase, nouns)
  begin
    return phrase.sub!(/--(nnp?s?)--/i) do
      Noun.inflect_from_tag(nouns.sample, $1)
    end
  rescue => exception
    puts exception
  end
end

options = {
  :sentences => 40,
}

# read in command line args
option_parser = OptionParser.new do |opt|
  opt.on('-t', '--text TEXT', 'Text to read from in the output folder') { |o| options[:text] = o }
  opt.on('-s', '--sentences [NUMBER]', OptionParser::DecimalInteger, 'Number of sentences to output (default 40)') { |o| options[:sentences] = o }
  opt.on('-f', '--noun-files [x,y,z]', 'Additional list of noun files to read in') { |o| options[:noun_files] = o }
end
option_parser.parse!

if options[:text].nil?
  puts OptionParser::MissingArgument.new('text')
  puts option_parser
  exit
end

# get the list of files
files = Dir.glob("./output/#{options[:text]}_*.txt")

# load phrase files
phrase_files = files.reduce([]) do |memo, file|
  memo.push(file) if file =~ /_\d+.txt$/
  memo
end

phrases = []
phrase_files.each do |file|
  phrases.concat(IO.readlines(file))
end

# load nouns
nouns = IO.readlines("./output/#{options[:text]}_removed_nouns.txt")
if options[:noun_files]
  options[:noun_files].split(",") do |file|
    nouns.concat(IO.readlines(file))
  end
end
nouns.uniq!

# pick phrases
phrases = phrases.sample(options[:sentences])

# for each phrase, yank out the placeholders and inflect the nouns
phrases.each do |phrase|
  sentence = phrase.dup
  while doSub!(sentence, nouns) do end

  puts sentence
end
